apiVersion: tekton.dev/v1beta1
kind: Pipeline

metadata:
  name: bonfire
  labels:
    build.appstudio.redhat.com/pipeline: "bonfire"

spec:
  params:
    - name: URL
      type: string
      description: URL of the Git repository use for fetching the tasks
      default: https://github.com/project-koku/koku-ci

    - name: REVISION
      type: string
      description: Git commit revision to use for fetching the tasks
      default: main

    - name: BONFIRE_IMAGE
      type: string
      description: The container Bonfire image to use for the tekton tasks
      default: quay.io/project-koku/koku-test-container:latest

    - name: SNAPSHOT
      type: string
      description: |
        JSON string provides useful information about the test, such as which
        components Konflux is testing, and what git repository and commit
        Konflux is using to build those components.

    - name: EPHEMERAL_ENV_PROVIDER_SECRET
      type: string
      default: ephemeral-env-provider
      description: "Secret for connecting to ephemeral env provider cluster"

    - name: APP_INTERFACE_SECRET
      type: string
      default: app-interface
      description: "Secret for connecting to app-interface"

    - name: APP_NAME
      type: string
      description: name of app-sre "application" folder this component lives in

    - name: COMPONENTS
      type: string
      description: space-separated list of components to load
      default: ""

    - name: COMPONENTS_W_RESOURCES
      type: string
      description: component to keep
      default: ""

    - name: AWS_SECRET
      type: string
      default: hccm-konflux-artifacts
      description: Secret with connection details to S3

    - name: BONFIRE_COMPONENT_NAME
      type: string
      default: ""
      description: name of the app-sre component name

    - name: COMPONENT_NAME
      type: string
      description: name of app-sre "resourceTemplate" in deploy.yaml for this component

    - name: EXTRA_DEPLOY_ARGS
      type: string
      description: "Extra arguments for the deployment"
      default: ""

    - name: DEPLOY_FRONTENDS
      type: string
      description: "Deploy frontend in the env or not"
      default: ""

    - name: DEPLOY_TIMEOUT
      type: string
      description: "Deploy timeout"
      default: "30min"

  results:
    - name: ARTIFACTS_URL
      description: URL for the test's artifacts
      value: $(finally.teardown.results.ARTIFACTS_URL)

  tasks:
    - name: reserve-namespace
      params:
        - name: NS_REQUESTER
          value: "$(context.pipelineRun.name)"

        - name: EPHEMERAL_ENV_PROVIDER_SECRET
          value: "$(params.EPHEMERAL_ENV_PROVIDER_SECRET)"

        - name: BONFIRE_IMAGE
          value: "$(params.BONFIRE_IMAGE)"

      taskRef:
        resolver: git
        params:
          - name: url
            value: "$(params.URL)"

          - name: revision
            value: "$(params.REVISION)"

          - name: pathInRepo
            value: tasks/reserve-namespace.yaml

    - name: deploy-application
      params:
        - name: BONFIRE_IMAGE
          value: "$(params.BONFIRE_IMAGE)"

        - name: SNAPSHOT
          value: "$(params.SNAPSHOT)"

        - name: NS
          value: "$(tasks.reserve-namespace.results.NS)"

        - name: NS_REQUESTER
          value: "$(context.pipelineRun.name)"

        - name: APP_INTERFACE_SECRET
          value: "$(params.APP_INTERFACE_SECRET)"

        - name: APP_NAME
          value: "$(params.APP_NAME)"

        - name: BONFIRE_COMPONENT_NAME
          value: "$(params.BONFIRE_COMPONENT_NAME)"

        - name: COMPONENTS
          value: "$(params.COMPONENTS)"

        - name: COMPONENTS_W_RESOURCES
          value: "$(params.COMPONENTS_W_RESOURCES)"

        - name: EXTRA_DEPLOY_ARGS
          value: "$(params.EXTRA_DEPLOY_ARGS)"

        - name: DEPLOY_FRONTENDS
          value: "$(params.DEPLOY_FRONTENDS)"

        - name: DEPLOY_TIMEOUT
          value: "$(params.DEPLOY_TIMEOUT)"

      runAfter:
        - reserve-namespace

      taskRef:
        resolver: git
        params:
          - name: url
            value: "$(params.URL)"

          - name: revision
            value: "$(params.REVISION)"

          - name: pathInRepo
            value: tasks/deploy.yaml

  finally:
    - name: teardown
      params:
        - name: NS
          value: "$(tasks.reserve-namespace.results.NS)"
        - name: NS_REQUESTER
          value: "$(context.pipelineRun.name)"
        - name: ARTIFACTS_KEY
          value: "$(context.pipelineRun.namespace)/$(context.pipelineRun.name)"
        - name: AWS_SECRET
          value: "$(params.AWS_SECRET)"
        - name: BONFIRE_IMAGE
          value: "$(params.BONFIRE_IMAGE)"
      taskRef:
        resolver: git
        params:
          - name: url
            value: "$(params.URL)"
          - name: revision
            value: "$(params.REVISION)"
          - name: pathInRepo
            value: tasks/teardown.yaml

    - name: notify-failure
      when:
        - input: $(tasks.status)
          operator: in
          values: [ "Failed", "Cancelled" ]
        - input: "{{ event_type }}"
          operator: in
          values:
            - "push"
      params:
        - name: message
          value: |
            :x: Pipeline `$(context.pipelineRun.name)` has $(tasks.status).
            See details: <https://konflux-ui.apps.stone-prd-rh01.pg1f.p1.openshiftapps.com/ns/cost-mgmt-dev-tenant/applications/$(params.APP_NAME)/pipelineruns/$(context.pipelineRun.name)|Pipeline Run>
        - name: secret-name
          value: "slack-webhook-notification-secret"
        - name: key-name
          value: "webhook-url"
      taskRef:
        params:
          - name: name
            value: slack-webhook-notification
          - name: bundle
            value: quay.io/konflux-ci/tekton-catalog/task-slack-webhook-notification:0.1@sha256:452188df385218d0a1d9d097ff5daa67f11ae3597c917a3c2bb644787453a8e0
          - name: kind
            value: task
        resolver: bundles
